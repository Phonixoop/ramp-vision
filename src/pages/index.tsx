import { FormInputIcon, UserCog2 } from "lucide-react";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";

import BlurBackground from "~/ui/blur-backgrounds";
import Button from "~/ui/buttons";

import { api } from "~/utils/api";

import Header from "~/features/header";
import Count from "~/features/counter-animation";
import NumberAnimation from "~/features/counter-animation";
import Link from "next/link";
import AreaChartFake from "~/features/fake-charts/area";

export default function Home() {
  // const users = api.example.getAll.useQuery();
  const { data: sessionData } = useSession();
  const getCount = api.home.getdaysCount.useQuery();
  return (
    <>
      <Head>
        <title>RAMP | Vision</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BlurBackground />
      <Header />
      <div className=" flex min-h-screen w-full  flex-col items-center justify-center gap-5 overflow-hidden bg-secondary transition-colors duration-1000 ">
        <section
          dir="rtl"
          className="mx-auto flex max-w-[1000px] flex-col items-center gap-7 p-0   sm:p-5"
        >
          <h1 className="text-center text-4xl font-bold  text-primary">
            نرم افزار جامع تجزیه تحلیل و آنالیز داده های پرسنل و شعب
          </h1>
          <p className="max-w-[550px] text-center text-primary/80 ">
            کلیه اطلاعات پایه و مدیریت مورد نیاز همانند انواع خدمت، پوشش های
            بیمه ای ، تعرفه های درمانی و ارزیابی ، اطلاعات کاربران و مراجع
            درمانی جهت نظارت بر فعالیت سامانه و کلیه بخش های زیر مجموعه آن از
            طریق این پنل صورت می گیرد.
          </p>
          <div className="flex w-full items-center justify-center gap-4 py-4 md:pb-10">
            <Link
              className="focus-visible:ring-ring inline-flex items-center justify-center whitespace-nowrap rounded-md bg-primary px-4 py-2 text-sm  font-medium text-secondary shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50"
              href={"about"}
            >
              درباره RAMP
            </Link>

            {!sessionData?.user && (
              <Button
                className="flex  items-center justify-center gap-2 rounded-lg border border-accent  stroke-accent p-0 px-2 py-1.5  text-primary"
                onClick={
                  sessionData ? () => void signOut() : () => void signIn()
                }
              >
                <span className="">ورود</span>
                <FormInputIcon className="stroke-primary" />
              </Button>
            )}
          </div>
        </section>
        <Card value={!getCount.data ? 0 : getCount.data} />
        <section className="flex w-9/12 items-center justify-center gap-2">
          <div className="w-full">
            <AreaChartFake />
          </div>
          <div className="w-full">
            <AreaChartFake />
          </div>
        </section>

        {/* 
        <Image
          className="absolute left-[1000px] top-20"
          src={"/images/dashboard.jpg"}
          width={1916}
          height={1080}
          alt="dashboard"
        /> */}
      </div>
    </>
  );
}

function Card({ value = 50 }) {
  return (
    <div className="bg-secondary text-primary">
      <p>
        تا کنون <span className="text-2xl text-accent">{value}</span> روز، گزارش
        گرفته شده
      </p>
    </div>
  );
}
const cities = [
  {
    name: "New York",
    sales: 9800,
  },
  {
    name: "London",
    sales: 4567,
  },
  {
    name: "Hong Kong",
    sales: 3908,
  },
  {
    name: "San Francisco",
    sales: 2400,
  },
  {
    name: "Singapore",
    sales: 1908,
  },
  {
    name: "Zurich",
    sales: 1398,
  },
];

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <>
      <Button
        className="flex items-stretch justify-center gap-2 rounded-full bg-secbuttn stroke-accent px-3 text-accent"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        <span className="pt-1">
          {sessionData ? sessionData.user?.username : "ورود"}
        </span>
        <span>
          <UserCog2 />
        </span>
      </Button>
    </>
  );
}
